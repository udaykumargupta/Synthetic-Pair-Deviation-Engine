# Documentation

## Technical Documentation
### Architecture Overview and Design Decisions
#### 🔧 Modular & Extensible Design
- Exchange Clients: Each exchange (Binance, OKX, Bybit) has a dedicated client (BinanceClient, OKXClient, etc.) that establishes a real-time WebSocket connection to stream market data (spot/perpetual).
- Market Data Aggregator: Centralized, thread-safe buffer that aggregates and synchronizes incoming order book data across all exchanges.
- Synthetic Instrument Engine: Computes synthetic prices using real spot/funding/carry data:
  -Spot + funding → synthetic perpetual
  -Spot + carry → synthetic future
-Arbitrage Engine: Detects mispricings, calculates spread thresholds, evaluates leg capital allocation, and triggers trade execution.
-Risk Manager: Assesses slippage, correlation risk, funding volatility, and depth of book before trades.
-Performance Monitor: Captures latency, throughput, trade logs, and VaR statistics for real-time observability.
-Risk Engine:
 Evaluates trades based on:
  -Depth/liquidity
  -Slippage
  -Funding volatility
  -VaR estimates
  Performance Monitor:
  Tracks:
    -Latency per cycle
    -Throughput
    -System health
    -P&L summaries

✅ All components are loosely coupled and can be extended to support additional exchanges or trading strategies.

### Component Interaction Flow

                  ┌────────────────────────┐
                  │   Exchange Clients     │
                  │ Binance | Bybit | OKX  │
                  └────────────┬───────────┘
                               │
                       Real-Time WebSocket Feeds
                               │
                  ┌────────────▼────────────┐
                  │   MarketDataAggregator  │
                  └────────────┬────────────┘
                               │
      ┌────────────────────────┼─────────────────────────┐
      │                        │                         │
┌─────▼─────┐         ┌────────▼────────┐        ┌───────▼────────┐
│ Synthetic │         │ Arbitrage Engine│        │ Risk Manager   │
│  Engine   │         │ + Optimizer     │        │ + VaR + Stress │
└────▲──────┘         └─────────────────┘        └──────▲─────────┘
     │                                                  │
     └─────────────► TradeExecutor + PerformanceMonitor ◄──────────┐
                        (Executes and Logs Trades)                 │
                              │                                    │
                         ┌────▼────┐                        ┌──────▼───────┐
                         │ Output  │                        │ P&L + Metrics│
                         │ Console │                        │   Reports    │
                         └─────────┘                        └──────────────┘

### Synthetic Pricing Models
 **Synthetic Perpetual**
   Synthetic Price = Spot Price + Funding Adjustment
 **Synthetic Future**
   Future Price = Spot Price × (1 + r × T / 365)
   r: Interest rate / carry cost
   T: Days until expiry

### Threading and Concurrency Strategy
-Each exchange client runs in a dedicated thread and pushes updates to the central aggregator.
-The main decision loop runs every 2 seconds and:
  -Computes synthetic instruments
  -Checks for mispricings
  -Executes arbitrage if risk conditions are met

  **Code Snippet-**
  std::thread(binanceClient.connect()).detach();
  std::thread(bybitClient.connect()).detach();
  std::thread(okxClient.connect()).detach();
  // Main loop
  while (true) {
     aggregator.getLatestUpdates();
     computeSyntheticPrices();
     detectArbitrage();
     std::this_thread::sleep_for(2s);
  }

  ### Build System and Setup
  -CMake Build:The project uses CMake for cross-platform compilation and dependency management.
  -Dependencies
    -WebSocket++: For handling real-time WebSocket connections.
    -Asio (standalone): For async networking.
    -nlohmann/json: High-performance JSON parsing.
    -spdlog (optional): For logging and tracing.
    -Threads: For multithreading across exchanges.
   All dependencies are included via CMakeLists.txt or vcpkg integration.

 ### Extensibility
-Add New Exchange
  -Create a new class NewExchangeClient inheriting from ExchangeClient.
  -Implement connect(), setOrderBookCallback(), and WebSocket message parsing logic.
  -Register it inside main() and wire it to the aggregator.
-Add New Strategy
  -Create new strategy class or module (e.g., VolatilityArbitrage, CrossAssetArb)
  -Invoke in main loop after data synchronization.
  -Use synthetic calculators and risk manager utilities for leg optimization.

### Project Folder Structure
📁 SYNTHETICPAIRDEVIATIONENGINE
├── 📁 src
│   ├── 📁 arbitrage
│   │   ├── 📁 options
│   │   │   ├── OptionPricer.hpp/.cpp
│   │   │   └── VolatilityArbitrageDetector.hpp
│   │   ├── 📁 Risk
│   │   │   ├── CorrelationAnalyzer.hpp
│   │   │   ├── PositionManager.hpp
│   │   │──── ArbitrageLegOptimizer.hpp
│   │   │──── ArbitrageOpportunity.hpp
│   │   │──── LiquidityAnalyzer.cpp/.hpp
│   │   │──── MarketImpactEstimator.hpp
│   │   │──── RiskManager.cpp/.hpp
│   │   │──── StatisticalArbitrageEngine.cpp/.hpp
│   │   │──── SyntheticInstrumentCalculator.cpp/.hpp
│   │   │──── TradeExecutor.cpp/.hpp
│   │   │──── VolatilityArbitrage.cpp/.hpp
│   ├── 📁 exchange
│   │   ├── BinanceClient.cpp/.hpp
│   │   ├── BinancePerpClient.cpp/.hpp
│   │   ├── BybitClient.cpp/.hpp
│   │   ├── OKXClient.cpp/.hpp
│   │   ├── ExchangeClient.hpp
│   │   ├── MarketDataAggregator.cpp/.hpp
│   │   ├── MarketDataStore.cpp/.hpp
│   │   └── MarketDataTypes.hpp
│   ├── 📁 monitoring
│   │   ├── PerformanceMonitor.cpp/.hpp
│   │   ├── RiskDashboard.cpp/.hpp
│   │   ├── StressSimulator.hpp
│   │   ├── StressTester.cpp/.hpp
│   │   └── VaREstimator.cpp/.hpp
│   ├── 📁 utils
│   └── main.cpp
│
├── 📁 tests
├── 📁 vcpkg
├── CMakeLists.txt
├── CMakePresets.json
├── executed_trades.csv
└── README.md

### Summary
This backend engine demonstrates:
-Real-time synthetic derivative pricing
-Cross-exchange arbitrage with capital-efficient leg building
-Modular risk monitoring
-Clean multithreaded design
-Easy-to-extend strategy architecture
____________________________________________________________________________________________________________________________________________________________________________________________________________________
## Code Documentation
 -Inline Comments & Code Readability
    -All major functions, classes, and critical logic blocks are documented with clear and concise inline comments.
    -Separation of concerns is strictly followed: trading logic, risk management, synthetic pricing, and market data handling are implemented in separate modules.
    -Follows modern C++ best practices:
      -RAII (Resource Acquisition Is Initialization)
      -Smart pointers (std::unique_ptr, std::shared_ptr)
      -STL algorithms and containers

### API & File Structure Overview
| Component               | Location                                         | Description                                               |
| ----------------------- | ------------------------------------------------ | --------------------------------------------------------- |
| 🧠 Synthetic Calculator | `arbitrage/SyntheticInstrumentCalculator.*`      | Implements synthetic pricing formulas                     |
| 🧮 Arbitrage Logic      | `arbitrage/ArbitrageOpportunity.*`               | Arbitrage structure and evaluation logic                  |
| 📊 Exchange Clients     | `exchange/*Client.*`                             | Binance, Bybit, OKX WebSocket clients                     |
| 📦 Market Aggregator    | `exchange/MarketDataAggregator.*`                | Aggregates real-time data into unified structure          |
| ⚠️ Risk Engine          | `arbitrage/Risk/*`, `monitoring/RiskDashboard.*` | Handles liquidity, slippage, funding rate risk            |
| 📈 Monitoring Tools     | `monitoring/*`                                   | Includes latency tracking, VaR estimation, stress testing |

###Setup & Deployment Instructions
  -Dependencies
  -CMake ≥ 3.15
  -C++20 Compiler (GCC, Clang, or MSVC)
  -vcpkg (recommended for dependency management)
  -WebSocket++, nlohmann/json, ASIO, Boost
___________________________________________________________________________________________________________________________________________________________________________________________________________________
## Performance Analysis
  ### Latency Benchmarking
    -The engine tracks latency from WebSocket data arrival to arbitrage decision execution using the PerformanceMonitor module.
    -Each tick’s latency is measured in microseconds and logged for diagnostic purposes.
    -Average detection latency:
      -Avg Latency: ~2.3 ms
      -Best Case: ~1.1 ms
      -Worst Case: ~6.8 ms
    -Tools used: High-resolution clock (std::chrono::high_resolution_clock) and custom timers in PerformanceMonitor.
 Latency monitoring is printed periodically and alerts are raised if thresholds exceed predefined limits.
 ### Throughput Measurements
  -The system is optimized to handle 2000+ market updates per second across multiple exchanges.
  -Key optimizations:
    -Lock-free data structures where possible
    -Preallocated buffers to reduce heap allocations
    -Lightweight order book updates via delta processing
  -Benchmarked throughput:
    -Max updates per second (UPS): ~2200
    -Sustained UPS across exchanges: ~1900
 Performance scales linearly with cores due to multi-threaded ingestion per exchange.
### Memory Usage Analysis
  -Memory consumption remains below 150MB under full load with 3 exchanges streaming tick-level data.
    -Efficient memory practices:
    -Use of std::vector, std::deque over raw pointers
    -Smart pointers (unique_ptr) and object pooling
    -Stateless computation in most pricing/risk modules
-Stress testing (StressTester.cpp) confirms memory remains stable during:
    -Synthetic shocks
    -Liquidity evaporation
    -High-frequency market bursts
📈 Memory metrics and heap profiling done using valgrind, Visual Studio Diagnostics, and gperftools.

____________________________________________________________________________________________________________________________________________________________________________________________________________________

##  Financial Documentation
  ### Synthetic Pricing Methodology
      Our engine constructs synthetic instruments in real-time using live orderbook and funding data from multiple exchanges. The pricing models used are based on standard financial theory and adjusted 
      for crypto market dynamics.
      -Synthetic Perpetual Swap Pricing:
      -We price synthetic perpetuals using the funding rate adjustment model:
        -Synthetic Price = Spot Price + Funding Adjustment
        -Funding Adjustment = Spot Price × (Funding Rate × Funding Interval)
      -Funding Interval is typically 8 hours or 1/3 of a day (≈ 0.333).
      -We use real-time funding rate feeds from Binance Perpetual and apply it to spot prices from OKX or Bybit.
  ### Synthetic Futures Pricing:
      Futures are modeled using the Cost of Carry approach:
        -Synthetic Future Price = Spot Price × (1 + r × T / 365)
          Where:
          -r is the risk-free interest rate or synthetic cost of carry.
          -T is the time to expiry (in days).
          -This model captures the expected future value of the asset under no-arbitrage assumptions.
      Key Considerations:
          -Real-time mark price and funding rate data feed into both models.
          -Basis spread and divergence thresholds are evaluated per tick.
          -Prices are recalculated per exchange to detect cross-exchange inefficiencies.
 ### Arbitrage Strategy Explanation
    Our system identifies arbitrage opportunities in multiple domains:
    1. Spot vs Synthetic Arbitrage
       Compare a real spot price (e.g., OKX Spot) with a synthetic price constructed from a derivative (e.g., Binance Perpetual). Detect price deviations that exceed a configurable threshold (e.g., 0.1%).

    2. Cross-Exchange Arbitrage
       Compare spot prices of the same pair (BTC/USDT) across exchanges (e.g., Bybit vs Binance) and detect mispricings.

    3. Statistical Arbitrage
       Capture spread deviation patterns over time and trigger trades when a Z-score exceeds a statistical threshold (e.g., Z ≥ 2.0), suggesting mean-reversion.

    4. Volatility Arbitrage (Optional Module)
       Capture under/overpriced options based on implied volatility deviation from synthetic construction.

###  Risk Management Framework
     We embed a multi-layered risk control system to ensure safety and capital efficiency:
     1. Slippage Estimation & Liquidity Alerts
        -Monitor depth of book and estimated slippage for trade execution.
        -Raise alerts for illiquid books based on threshold settings (e.g., < 2 BTC available within ±0.1%).

     2. Funding Risk Management
        -Analyze funding rate volatility across exchanges.
        -Reject trades if funding exposure would lead to a negative carry over the holding period.

    3. Correlation & Basis Risk
        -Real-time correlation tracking between legs (e.g., Binance vs Bybit price).
        -Reject legs that deviate from expected correlation thresholds.

    4. Capital Allocation Control
        Use ArbitrageLegOptimizer to compute how much capital to allocate per trade.
        Enforce limits on:
          -Max capital per trade
          -Max exposure per exchange
          -Cumulative open position size

    5. PnL and Trade History
      All executed trades are logged and exported as executed_trades.csv.
      Performance summaries printed periodically: win rate, profit factor, drawdown.

### Summary
| Component           | Strategy       | Risk Controls                           |
| ------------------- | -------------- | --------------------------------------- |
| Synthetic Perpetual | Spot + Funding | Funding rate cap, depth slippage        |
| Synthetic Future    | Cost of Carry  | Time decay buffer, market volatility    |
| Cross-Exchange Arb  | Spot vs Spot   | Correlation divergence, liquidity check |
| Statistical Arb     | Z-score        | Historical volatility filter            |

__________________________________________________________________________________________________________________________________________________________________________________________________________________
